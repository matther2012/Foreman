from cStringIO import StringIO

try:
    from PyRTF import *

    rtf_import = True
except ImportError:
    rtf_import = False


from os import path
from datetime import datetime

# local imports
from ..utils.utils import ROOT_DIR
from ..model import ForemanOptions, CaseStatus


def open_file(file_location):
    return file(file_location, 'w')


def make_stylesheet():
    result = StyleSheet()

    NormalText = TextStyle(TextPropertySet(result.Fonts.Arial, 18))

    ps = ParagraphStyle('Normal', NormalText.Copy(), ParagraphPropertySet(space_before=60, space_after=60))
    result.ParagraphStyles.append(ps)

    NormalText.TextPropertySet.SetSize(40)
    ps = ParagraphStyle('Heading 1', NormalText.Copy(), ParagraphPropertySet(space_before=240, space_after=60))
    result.ParagraphStyles.append(ps)

    NormalText.TextPropertySet.SetSize(32).SetBold(True)
    ps = ParagraphStyle('Heading 2', NormalText.Copy(), ParagraphPropertySet(space_before=240, space_after=60))
    result.ParagraphStyles.append(ps)

    NormalText.TextPropertySet.SetSize(24).SetBold(True)
    ps = ParagraphStyle('Heading 3', NormalText.Copy(), ParagraphPropertySet(space_before=240, space_after=60))
    result.ParagraphStyles.append(ps)

    NormalText.TextPropertySet.SetSize(100)
    ps = ParagraphStyle('Title', NormalText.Copy(), ParagraphPropertySet(space_before=240, space_after=60))
    result.ParagraphStyles.append(ps)

    #	Add some more in that are based on the normal template but that
    #	have some indenting set that makes them suitable for doing numbered
    normal_numbered = result.ParagraphStyles.Normal.Copy()
    normal_numbered.SetName('Normal Numbered')
    normal_numbered.ParagraphPropertySet.SetFirstLineIndent(TabPropertySet.DEFAULT_WIDTH * -1)
    normal_numbered.ParagraphPropertySet.SetLeftIndent(TabPropertySet.DEFAULT_WIDTH)

    result.ParagraphStyles.append(normal_numbered)

    normal_numbered2 = result.ParagraphStyles.Normal.Copy()
    normal_numbered2.SetName('Normal Numbered 2')
    normal_numbered2.ParagraphPropertySet.SetFirstLineIndent(TabPropertySet.DEFAULT_WIDTH * -1)
    normal_numbered2.ParagraphPropertySet.SetLeftIndent(TabPropertySet.DEFAULT_WIDTH * 2)

    result.ParagraphStyles.append(normal_numbered2)

    ## LIST STYLES
    for idx, indent in [(1, TabPS.DEFAULT_WIDTH),
                        (2, TabPS.DEFAULT_WIDTH * 2),
                        (3, TabPS.DEFAULT_WIDTH * 3)]:
        indent = TabPropertySet.DEFAULT_WIDTH
        ps = ParagraphStyle('List %s' % idx,
                            TextStyle(TextPropertySet(result.Fonts.Arial, 22)),
                            ParagraphPropertySet(space_before=60,
                                                 space_after=60,
                                                 first_line_indent=-indent,
                                                 left_indent=indent))
        result.ParagraphStyles.append(ps)

    return result


def create_rtf(case, histories):
    style_sheet = make_stylesheet()
    doc = Document(view_kind=0, style_sheet=style_sheet)
    ss = doc.StyleSheet

    # Due to a bug in pyRTF, we have to specify the paper size to be the reverse of a normal A4 sheet to get
    # a landscape mode. Normally 11907 and 16838 are the other way round.
    # This line and references to it should be removed once my pull request to pyRTF is accepted.
    paper = Paper('A4', 9, 'A4 210 x 297 mm', 16838, 11907)

    section = Section()
    doc.Sections.append(section)

    title = 'Case Report for {}'.format(case.case_name)

    logo = path.join(ROOT_DIR, 'static', 'images', 'logo', 'logortf.png')
    image = Image(logo)
    section.Header.append(image)
    section.Header.append(title)
    today = ForemanOptions.get_date(datetime.now())
    section.Footer.append('Case Report for {} generated by Foreman on {}'.format(case.case_name, today))

    p = Paragraph(ss.ParagraphStyles.Title)
    p.append(title)
    section.append(p)

    section = Section(break_type=3, landscape=True,  paper=paper)
    doc.Sections.append(section)

    case_history, task_histories, evidence_histories = histories

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Case Summary')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Case created: \t\t\t{}'.format(case.date_created))
    section.append(p)
    if case.status == CaseStatus.REJECTED:
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Date Rejected: \t\t\t{}'.format(case.authorised.date))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Rejection Justification: \t{}'.format(case.authorised.reason))
        section.append(p)
    elif case.status != CaseStatus.REJECTED or case.status != CaseStatus.PENDING:
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Date Approved: \t\t\t{}'.format(case.authorised.date))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Authorisation Justification: \t{}'.format(case.authorised.reason))
        section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Authoriser: \t\t\t{}'.format(case.authoriser.fullname))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Requester: \t\t\t{}'.format(case.requester.fullname if case.requester else "None assigned"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Current Status: \t\t\t{}'.format(case.status))
    section.append(p)
    if case.status != CaseStatus.PENDING:
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Current Status Date:\t\t{}'.format(case.get_status().date))
        section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Reference: \t\t\t{}'.format(case.reference))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Case Files Location: \t\t' + r'{}'.format(case.location if case.location else "Not specified"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Private Case: \t\t\t{}'.format("Yes" if case.private else "No"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Current Priority: \t\t\t{}'.format(case.case_priority))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Current Classification: \t\t{}'.format(case.classification))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Current Type: \t\t\t{}'.format(case.case_type))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    case_links = case.get_links()
    links = ", ".join([c.case_name for c in case_links])
    p.append('Cases Linked To: \t\t{}'.format(links if len(case_links) > 0 else "No links"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    case_links = case.get_from_links()
    links = ", ".join([c.case_name for c in case_links])
    p.append('Cases Linked From: \t\t{}'.format(links if len(case_links) > 0 else "No links"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Principle Case Manager: \t\t{}'.format(
        case.principle_case_manager.fullname if case.principle_case_manager else "None assigned"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Secondary Case Manager: \t{}'.format(
        case.secondary_case_manager.fullname if case.secondary_case_manager else "None assigned"))
    section.append(p)

    section = Section(break_type=3, landscape=True,  paper=paper)
    doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Task Summary')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Normal)
    if len(case.tasks) == 0:
        p.append('No tasks has been added.')
        section.append(p)
    else:
        section.append(p)
        t = Table(1600,1600,1000,1000,2000,2000,2000,2000)
        headers = ["Task Name","Task Created", "Task Type", "Status", "Principle Forensic Investigator",
                   "Secondary Forensic Investigator", "Principle QA Investigator", "Secondary QA Investigator"]
        row = []
        for h in headers:
            row.append(Cell(h))
        t.append(*row)
        row = []
        for task in case.tasks:
            entries = [rtf_encode(task.task_name), task.date_created, rtf_encode(task.task_type.task_type),
                       rtf_encode(task.status),
                       task.principle_investigator.fullname if task.principle_investigator else "-",
                       task.secondary_investigator.fullname if task.secondary_investigator else "-",
                       task.principle_QA.fullname if task.principle_QA else "-",
                       task.secondary_QA.fullname if task.secondary_QA else "-",]
            for e in entries:
                row.append(Cell(e))
            t.append(*row)
            row = []
        section.append(t)

    section = Section(break_type=3, landscape=True,  paper=paper)
    doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Evidence Summary')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Normal)
    if len(case.evidence) == 0:
        p.append('No evidence has been added.')
        section.append(p)
    else:
        section.append(p)
        t = Table(2700,2700,2700,2700,2700)
        headers = ["Reference", "Date Added", "Type", "User", "Current Status"]
        row = []
        for h in headers:
            row.append(Cell(h))
        t.append(*row)
        row = []
        for evidence in case.evidence:
            current_status = "In storage" if evidence.current_status.check_in is True else "Checked out by {}".format(
                evidence.current_status.user.fullname)
            entries = [rtf_encode(evidence.reference), evidence.date, rtf_encode(evidence.type), evidence.user.fullname,
                       current_status]
            for e in entries:
                row.append(Cell(e))
            t.append(*row)
            row = []
        section.append(t)

    section = Section(break_type=3, landscape=True,  paper=paper)
    doc.Sections.append(section)

    if case.tasks:
        p = Paragraph(ss.ParagraphStyles.Heading1)
        p.append('Task Details')
        section.append(p)

    for task in case.tasks:
        p = Paragraph(ss.ParagraphStyles.Heading2)
        p.append('Task Details: {}'.format(task.task_name))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Task Created: \t\t\t{}'.format(task.date_created))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Task Status: \t\t\t{}'.format(task.status))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Task Type: \t\t\t{}'.format(task.task_type))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Task Files Location: \t\t{}'.format(task.location if task.location else "Not specified"))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Principle Forensic Investigator: \t{}'.format(
            task.principle_investigator.fullname if task.principle_investigator else "None assigned"))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Secondary Forensic Investigator: \t{}'.format(
            task.secondary_investigator.fullname if task.secondary_investigator else "None assigned"))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Principle QA Investigator: \t\t{}'.format(
            task.principle_QA.fullname if task.principle_QA else "None assigned"))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Secondary QA Investigator: \t{}'.format(
            task.secondary_QA.fullname if task.secondary_QA else "None assigned"))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Heading3)
        p.append('Task {} Notes'.format(task.task_name))
        section.append(p)

        if len(task.notes) == 0:
            p = Paragraph(ss.ParagraphStyles.Normal)
            p.append('No notes written.')
            section.append(p)

        for note in task.notes:
            p = Paragraph(ss.ParagraphStyles.Normal)
            p.append('Date: {}\t\tAuthor: {}'.format(note.date, note.author.fullname))
            section.append(p)

            body = rtf_encode(note.note)
            paragraphs = body.split("\n")
            for para in paragraphs:
                p = Paragraph(ss.ParagraphStyles.Normal)
                p.append(para)
                section.append(p)

        p = Paragraph(ss.ParagraphStyles.Heading3)
        p.append('Task {} Uploads'.format(task.task_name))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        if len(task.task_uploads) == 0:
            p.append('No files have been uploaded.')
            section.append(p)
        else:
            section.append(p)
            t = Table(2000,2000,2800,2000,2700,2700)
            headers = ["File Title", "Date Uploaded", "File Hash", "Uploader", "Notes", "File Location"]
            row = []
            for h in headers:
                row.append(Cell(h))
            t.append(*row)
            row = []
            for photo in task.task_uploads:
                entries = [rtf_encode(photo.file_title), photo.date, rtf_encode(photo.file_hash),
                           photo.uploader.fullname, rtf_encode(photo.file_note),
                           rtf_encode(photo.file_path)]
                for e in entries:
                    row.append(Cell(e))
                t.append(*row)
                row = []
            section.append(t)

        section = Section(break_type=3, landscape=True,  paper=paper)
        doc.Sections.append(section)

    if case.evidence:
        p = Paragraph(ss.ParagraphStyles.Heading1)
        p.append('Evidence Details')
        section.append(p)

    for evidence in case.evidence:
        p = Paragraph(ss.ParagraphStyles.Heading2)
        p.append('Evidence Details: {}'.format(evidence.reference))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Evidence Added: \t\t{}'.format(evidence.date))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Evidence Type: \t\t\t{}'.format(evidence.type))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('User Who Added Evidence: \t{}'.format(evidence.user.fullname))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Originator: \t\t\t{}'.format(evidence.originator))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Bag Number: \t\t\t{}'.format(evidence.evidence_bag_number))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Location Seized From: \t\t{}'.format(evidence.location))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Current Status: \t\t\t{}'.format(
            "In storage" if evidence.current_status.check_in is True else "Checked out by {}".format(
                evidence.current_status.user.fullname)))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Comments: \t\t\t{}'.format(evidence.comment))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Heading3)
        p.append('Chain of Custody for {}'.format(evidence.reference))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        section.append(p)
        t = Table(2000, 2500, 2000, 2000, 2000, 2000, 2500)
        headers = ["Record Date", "User", "Date of Movement", "Custodian / Location", "Action", "Comment",
                   "Attachments"]
        row = []
        for h in headers:
            row.append(Cell(h))
        t.append(*row)
        row = []
        for chain in evidence.user_handled:
            entries = [chain.date, chain.user.fullname, chain.custody_date, rtf_encode(chain.custodian),
                       "Evidence checked in" if chain.check_in else "Evidence checked out", rtf_encode(chain.comment),
                       "{}: {}".format(chain.custody_receipt_label,
                                       chain.custody_receipt) if chain.custody_receipt else "-"]
            for e in entries:
                row.append(Cell(e))
            t.append(*row)
            row = []
        section.append(t)

        p = Paragraph(ss.ParagraphStyles.Heading3)
        p.append('Evidence {} Uploads'.format(evidence.reference))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        if len(evidence.evidence_photos) == 0:
            p.append('No photos have been uploaded.')
            section.append(p)
        else:
            section.append(p)
            t = Table(2000,2000,2800,2000,2700,2700)
            headers = ["File Title", "Date Uploaded", "File Hash", "Uploader", "Notes", "File Location"]
            row = []
            for h in headers:
                row.append(Cell(h))
            t.append(*row)
            row = []
            for photo in evidence.evidence_photos:
                entries = [rtf_encode(photo.file_title), photo.date, rtf_encode(photo.file_hash),
                           photo.uploader.fullname, rtf_encode(photo.file_note),
                           rtf_encode(photo.file_path)]
                for e in entries:
                    row.append(Cell(e))
                t.append(*row)
                row = []
            section.append(t)

        section = Section(break_type=3, landscape=True,  paper=paper)
        doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Audit Logs')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Heading2)
    p.append('Case Audit Log')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Normal)
    section.append(p)
    t = Table(2000, 2000, 8000)
    headers = ["Date", "User", "Events"]
    row = []
    for h in headers:
        row.append(Cell(h))
    t.append(*row)
    row = []
    for history in case_history:
        hist = ""
        if not isinstance(history['change_log'], basestring):
            for entry, change in history['change_log'].iteritems():
                if change[0] == "ADD":
                   hist = "{} was assigned as {}".format(change[1], entry)
                elif change[0] == "DEL":
                    hist = "{} was removed as {}".format(change[1], entry)
                elif change[0] == "LINK":
                    hist = "A link to case {} was added".format(change[1])
                elif change[0] == "UNLINK":
                    hist = "The link to case {} was removed".format(change[1])
                elif change[0] == "AUTH":
                    hist = "The case was authorised with reason: {}".format(change[1])
                elif change[0] == "NOAUTH":
                    hist = "The case was rejected with reason: {}".format(change[1])
                else:
                    hist = "The {} changed from {} to {}".format(entry, change[0], change[1])
        else:
            hist = history['change_log']

        entries = [history['date'], history['user'].fullname, rtf_encode(hist)]
        for e in entries:
            row.append(Cell(e))
        t.append(*row)
        row = []
    section.append(t)

    section = Section(break_type=3, landscape=True,  paper=paper)
    doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading2)
    p.append('Task Audit Log')
    section.append(p)

    if len(task_histories) == 0:
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('No audit logs.')
        section.append(p)

    for task_history in task_histories:
        p = Paragraph(ss.ParagraphStyles.Heading3)
        p.append('Task Audit Log: {}'.format(getattr(task_history[0]['current'], "task_name")))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        section.append(p)
        t = Table(2000, 2000, 8000)
        headers = ["Date", "User", "Events"]
        row = []
        for h in headers:
            row.append(Cell(h))
        t.append(*row)
        row = []
        for history in task_history:
            hist = ""
            if not isinstance(history['change_log'], basestring):
                for entry, change in history['change_log'].iteritems():
                    if change[0] == "ADD":
                       hist = "{} was assigned as {}".format(change[1], entry)
                    elif change[0] == "DEL":
                        hist = "{} was removed as {}".format(change[1], entry)
                    else:
                        hist = "The {} changed from {} to {}".format(entry, change[0], change[1])
            else:
                hist = history['change_log']

            entries = [history['date'], history['user'].fullname, rtf_encode(hist)]
            for e in entries:
                row.append(Cell(e))
            t.append(*row)
            row = []
        section.append(t)

    section = Section(break_type=3, landscape=True,  paper=paper)
    doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading2)
    p.append('Evidence Audit Log')
    section.append(p)

    if len(evidence_histories) == 0:
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('No audit logs.')
        section.append(p)

    for evidence_history in evidence_histories:
        p = Paragraph(ss.ParagraphStyles.Heading3)
        p.append('Evidence Audit Log: {}'.format(getattr(evidence_history[0]['current'], "reference")))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        section.append(p)
        t = Table(2000, 2000, 8000)
        headers = ["Date", "User", "Events"]
        row = []
        for h in headers:
            row.append(Cell(h))
        t.append(*row)
        row = []
        for history in evidence_history:
            hist = ""
            if not isinstance(history['change_log'], basestring):
                for entry, change in history['change_log'].iteritems():
                    if change[0] == "ADD":
                       hist = "{} was assigned as {}".format(change[1], entry)
                    elif change[0] == "DEL":
                        hist = "{} was removed as {}".format(change[1], entry)
                    else:
                        hist = "The {} changed from {} to {}".format(entry, change[0], change[1])
            else:
                hist = history['change_log']

            entries = [history['date'], history['user'].fullname, rtf_encode(hist)]
            for e in entries:
                row.append(Cell(e))
            t.append(*row)
            row = []
        section.append(t)

    return doc


def rtf_encode_char(unichar):
    code = ord(unichar)
    if code < 128:
        return str(unichar)
    return '\\u' + str(code if code <= 32767 else code - 65536) + '?'


def rtf_encode(unistr):
    return ''.join(rtf_encode_char(c) for c in unistr)


def render_rtf_report(case, histories, render_file=None):
    if render_file is None:
        render_file = StringIO()

    if rtf_import:
        dr = Renderer()
        doc = create_rtf(case, histories)
        dr.Write(doc, render_file)
        return render_file
    else:
        return None